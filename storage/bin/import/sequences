#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use Data::Dumper;
use Dotenv -load;

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $ENV{'DRAKKAR_DB_DATABASE'}, $ENV{'DRAKKAR_DB_HOSTNAME'}),
    $ENV{'DRAKKAR_DB_USERNAME'},
    $ENV{'DRAKKAR_DB_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $ENV{'VINLAND_DB_DATABASE'}, $ENV{'VINLAND_DB_HOSTNAME'}),
    $ENV{'VINLAND_DB_USERNAME'},
    $ENV{'VINLAND_DB_PASSWORD'},
);

my $select_human_proteins_sth = $drakkar->prepare('
    SELECT type, taxon_id, accession, name, description
    FROM proteins
    WHERE type = \'h\'
    ORDER BY accession ASC
');

my $select_viral_proteins_sth = $drakkar->prepare('
    SELECT p.type, p.taxon_id, p.accession, i.name, i.start, i.stop, p.description
    FROM associations AS a, descriptions AS d, interactors AS i, proteins AS p, taxon AS t
    WHERE a.id = d.association_id
    AND (i.id = d.interactor1_id OR i.id = d.interactor2_id)
    AND p.id = i.protein_id
    AND p.taxon_id = t.ncbi_taxon_id
    AND a.state = \'curated\'
    AND d.deleted_at IS NULL
    AND p.type=\'v\'
    GROUP BY p.type, p.taxon_id, p.accession, i.name, i.start, i.stop, p.description
    ORDER BY p.accession ASC
');

my $select_canonical_sth = $drakkar->prepare('
    SELECT s.accession, s.sequence
    FROM proteins AS p, sequences AS s
    WHERE p.id = s.protein_id AND p.accession = ?
    AND s.is_canonical IS TRUE
');

my $select_isoforms_sth = $drakkar->prepare('
    SELECT s.accession, s.sequence
    FROM proteins AS p, sequences AS s
    WHERE p.id = s.protein_id AND p.accession = ?
    AND s.is_canonical IS FALSE
');

my $select_protein_sth = $vinland->prepare('
    SELECT id FROM proteins WHERE accession = ? AND name = ?
');

my @sequences = ();

$select_human_proteins_sth->execute;

while (my $protein = $select_human_proteins_sth->fetchrow_hashref) {
    $select_protein_sth->execute($protein->{'accession'}, $protein->{'name'});
    my($protein_id) = $select_protein_sth->fetchrow_array;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $protein->{'accession'}, $protein->{'name'})) if (! $protein_id);

    $select_canonical_sth->execute($protein->{'accession'});
    my($canonical) = $select_canonical_sth->fetchrow_hashref;
    $select_canonical_sth->finish;

    push(@sequences, [
        $protein_id,
        $canonical->{'accession'},
        1,
        0,
        $canonical->{'sequence'},
        1,
        length($canonical->{'sequence'}),
    ]);

    $select_isoforms_sth->execute($protein->{'accession'});

    while (my $isoform = $select_isoforms_sth->fetchrow_hashref) {
        push(@sequences, [
            $protein_id,
            $isoform->{'accession'},
            0,
            0,
            $isoform->{'sequence'},
            1,
            length($isoform->{'sequence'}),
        ]);
    }

    $select_isoforms_sth->finish;
}

$select_human_proteins_sth->finish;

$select_viral_proteins_sth->execute;

while (my $protein = $select_viral_proteins_sth->fetchrow_hashref) {
    $select_protein_sth->execute($protein->{'accession'}, $protein->{'name'});
    my($protein_id) = $select_protein_sth->fetchrow_array;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $protein->{'accession'}, $protein->{'name'})) if (! $protein_id);

    $select_canonical_sth->execute($protein->{'accession'});
    my($canonical) = $select_canonical_sth->fetchrow_hashref;
    $select_canonical_sth->finish;

    my $subsequence = substr($canonical->{'sequence'}, $protein->{'start'} - 1, $protein->{'stop'} - $protein->{'start'} + 1);

    push(@sequences, [
        $protein_id,
        $canonical->{'accession'},
        1,
        length($canonical->{'sequence'}) == length($subsequence) ? 0 : 1,
        $subsequence,
        $protein->{'start'},
        $protein->{'stop'},
    ]);

    if (length($canonical->{'sequence'}) == length($subsequence)) {
        $select_isoforms_sth->execute($protein->{'accession'});

        while (my $isoform = $select_isoforms_sth->fetchrow_hashref) {
            push(@sequences, [
                $protein_id,
                $isoform->{'accession'},
                0,
                0,
                $isoform->{'sequence'},
                1,
                length($isoform->{'sequence'}),
            ]);
        }

        $select_isoforms_sth->finish;
    }
}

$select_viral_proteins_sth->finish;

$vinland->do('COPY sequences(protein_id, accession, is_canonical, is_mature, sequence, start, stop) FROM STDIN');

$vinland->pg_putcopydata(join("\t", @{$_}) . "\n") foreach (@sequences);

$vinland->pg_putcopyend();

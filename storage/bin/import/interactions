#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use List::Util qw(uniq);
use Data::Dumper;
use Dotenv -load;

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $ENV{'DRAKKAR_DB_DATABASE'}, $ENV{'DRAKKAR_DB_HOSTNAME'}),
    $ENV{'DRAKKAR_DB_USERNAME'},
    $ENV{'DRAKKAR_DB_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $ENV{'VINLAND_DB_DATABASE'}, $ENV{'VINLAND_DB_HOSTNAME'}),
    $ENV{'VINLAND_DB_USERNAME'},
    $ENV{'VINLAND_DB_PASSWORD'},
);

my $select_descriptions_sth = $drakkar->prepare('
    SELECT
        a.pmid,
        d.method_id,
        p1.accession AS accession1, i1.name AS name1,
        p2.accession AS accession2, i2.name AS name2
    FROM
        associations AS a,
        descriptions AS d,
        interactors AS i1, proteins AS p1,
        interactors AS i2, proteins AS p2,
        taxon AS t
    WHERE a.id = d.association_id
      AND i1.id = d.interactor1_id
      AND i2.id = d.interactor2_id
      AND p1.id = i1.protein_id
      AND p2.id = i2.protein_id
      AND p2.taxon_id = t.ncbi_taxon_id
      AND a.state = \'curated\'
      AND d.deleted_at IS NULL
    ORDER BY p1.accession ASC, p2.accession ASC
');

my $select_protein_sth = $vinland->prepare('
    SELECT * FROM proteins WHERE accession = ? AND name = ?
');

my %interactions = ();

$select_descriptions_sth->execute;

while (my $description = $select_descriptions_sth->fetchrow_hashref) {
    $select_protein_sth->execute($description->{'accession1'}, $description->{'name1'});
    my $protein1 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $description->{'accession1'}, $description->{'name1'})) if (! $protein1);

    $select_protein_sth->execute($description->{'accession2'}, $description->{'name2'});
    my $protein2 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $description->{'accession2'}, $description->{'name2'})) if (! $protein2);

    my @sorted = sort {
        return +1 if ($a->{'type'} eq 'v');
        return -1 if ($b->{'type'} eq 'v');
        return $a->{'accession'} cmp $b->{'accession'};
    } ($protein1, $protein2);

    my $name1 = $sorted[0]->{'name'};
    my $accession1 = $sorted[0]->{'accession'};

    my $name2 = $sorted[1]->{'name'};
    my $accession2 = $sorted[1]->{'accession'};

    if (! $interactions{$accession1}->{$name1}->{$accession2}->{$name2}) {
        $interactions{$accession1}->{$name1}->{$accession2}->{$name2} = {
            'type' => $sorted[1]->{'type'} eq 'h' ? 'hh' : 'vh',
            'protein1_id' => $sorted[0]->{'id'},
            'protein2_id' => $sorted[1]->{'id'},
            'publications' => [$description->{'pmid'}],
            'methods' => [$description->{'method_id'}],
        };
    } else {
        push(@{$interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'publications'}}, $description->{'pmid'});
        push(@{$interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'methods'}}, $description->{'method_id'});
    }
}

$select_descriptions_sth->finish;

$vinland->do('COPY interactions(type, protein1_id, protein2_id, nb_publications, nb_methods) FROM STDIN');

foreach my $accession1 (sort { $a cmp $b } keys %interactions) {
    foreach my $name1 (sort { $a cmp $b } keys %{$interactions{$accession1}}) {
        foreach my $accession2 (sort { $a cmp $b } keys %{$interactions{$accession1}->{$name1}}) {
            foreach my $name2 (sort { $a cmp $b } keys %{$interactions{$accession1}->{$name1}->{$accession2}}) {
                $vinland->pg_putcopydata(join("\t", (
                    $interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'type'},
                    $interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'protein1_id'},
                    $interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'protein2_id'},
                    scalar(uniq @{$interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'publications'}}),
                    scalar(uniq @{$interactions{$accession1}->{$name1}->{$accession2}->{$name2}->{'methods'}}),
                )) . "\n");
            }
        }
    }
}

$vinland->pg_putcopyend();
